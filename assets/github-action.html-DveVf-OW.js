import{_ as n,r as l,c as h,b as p,a as s,f as e,w as a,e as r,o,d as t}from"./app-CZyPZiau.js";const d={},k={class:"table-of-contents"},c=r(`<h2 id="github-actions-是什么" tabindex="-1"><a class="header-anchor" href="#github-actions-是什么"><span>GitHub Actions 是什么？</span></a></h2><p>Github Actions 是 Github 官方出的持续集成服务, 挺早之前就推出了。类似的还有如微软的DevOps、GitLab CI、Circle CI、Travis CI等等。大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。</p><p>很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。</p><p>如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。</p><h2 id="什么是ci-cd" tabindex="-1"><a class="header-anchor" href="#什么是ci-cd"><span>什么是CI/CD？</span></a></h2><p><a href="https://link.zhihu.com/?target=https%3A//www.redhat.com/en/topics/devops/what-is-ci-cd" target="_blank" rel="noopener noreferrer">What is CI/CD? (redhat.com)</a></p><p>字面意思就是持续集成Continuous Intergation/持续分发Continuous Delivery持续部署Continuous Deployment，网上有太多同质的解释都太过于晦涩，</p><p>提到CI/CD就离不开一个词叫流水线。流水线上每个人的工作是分工明确的，而且工程是有先后顺序，就像造一台车，先造零件，然后组装、喷涂、内饰最后还要测试。软件开发同样如此，有前期的产品设计，UI设计、单元的开发，产品的测试，优化迭代等都由不同的人负责。</p><div class="language-mermaid" data-highlighter="shiki" data-ext="mermaid" data-title="mermaid" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">---</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">title: CI流程演示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">---</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">flowchart LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    subgraph A[持续集成]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    direction LR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    buid--&gt;test--&gt;merge</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    A[持续集成] --&gt; B[持续分发\\n自动地发布到仓库] --&gt; C[持续部署\\n自动地部署到服务器]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   style A fill:#f77062,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   style B fill:#00cdac,stroke:#00cdac,stroke-width:2px,color:#fff,stroke-dasharray: 5 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   style C fill:#209cff,stroke:#209cff,stroke-width:2px,color:#fff,stroke-dasharray: 5 5</span></span></code></pre></div><p>CI/CD另一个作用就是解决团队代码中的冲突或错误。你提交的代码是否会和其他人的有冲突，如果有就不准你提交，回去再和其他哥们儿商量下。同样这一点也能解决你上传BUG代码的问题，同样禁止你。</p><p>如果要做的这几点那就一定需要一个中心化的工厂而且有另一个高效的团队来管理这个工厂的正常运行。CI/CD背后的提供商就是这样的工厂，而为了保证“持续”这个词，任何人都不可能24小时不睡觉帮你在工厂审核你的代码，所以自动化也是CI/CD的一个关键，自动触发机制使得以上所有的操作都是自动化完成的。所以这个工厂其实是无人化的工厂。</p><p>说到底CI/CD并不是一项新的技术，而是一种行业的标准，任何人在其上工作都必须遵守的标准，正因有这样的标准化流程，才能让团队的每一个人都能在自己的岗位上有效输出。说白了也就是领导团队想方设法提高员工效率榨干每一分钟的防摸鱼工具。（笑）</p><p>确实是这样，CI/CD的标准化工具的出现使得从开发到部署的周期大幅度缩短，再配上云开发的代码仓，那简直就是：云仓CI，法力无边。Github Action出现了。</p><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><p>GitHub Actions 有一些自己的术语。</p><p>（1）<strong>workflow</strong> （工作流程）：持续集成一次运行的过程，就是一个 workflow。</p><p>（2）<strong>job</strong> （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</p><p>（3）<strong>step</strong>（步骤）：每个 job 由多个 step 构成，一步步完成。</p><p>（4）<strong>action</strong> （动作）：每个 step 可以依次执行一个或多个命令（action）。</p><h2 id="关于工作流程" tabindex="-1"><a class="header-anchor" href="#关于工作流程"><span>关于工作流程</span></a></h2><p>工作流是一个可配置的自动化过程，将运行一个或多个作业。工作流由签入到存储库的YAML文件定义，并将在存储库中的事件触发时运行，或者可以手动触发，或者按照定义的计划。</p><p>工作流定义在存储库的 <code>.github/workflows</code> 目录中，一个存储库可以有多个工作流，每个工作流可以执行一组不同的任务。例如，您可以有一个工作流来构建和测试拉取请求，另一个工作流在每次创建发布时部署您的应用程序，还有一个工作流在每次有人打开新问题时添加标签。</p><p>workflow 文件的配置字段非常多，详见<a href="https://help.github.com/en/articles/workflow-syntax-for-github-actions" target="_blank" rel="noopener noreferrer">官方文档</a>。下面是一些基本字段。</p><p><strong>（1）<code>name</code></strong></p><p><code>name</code>字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">GitHub Actions Demo</span></span></code></pre></div><p><strong>（2）<code>on</code></strong></p><p><code>on</code>字段指定触发 workflow 的条件，通常是某些事件。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">push</span></span></code></pre></div><p>上面代码指定，<code>push</code>事件触发 workflow。</p><p><code>on</code>字段也可以是事件的数组。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">pull_request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre></div><p>上面代码指定，<code>push</code>事件或<code>pull_request</code>事件都可以触发 workflow。</p><p>完整的事件列表，请查看<a href="https://help.github.com/en/articles/events-that-trigger-workflows" target="_blank" rel="noopener noreferrer">官方文档</a>。除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。</p><p><strong>（3）<code>on.&lt;push|pull_request.&lt;tags|branches</code></strong></p><p>指定触发事件时，可以限定分支或标签。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">master</span></span></code></pre></div><p>上面代码指定，只有<code>master</code>分支发生<code>push</code>事件时，才会触发 workflow。</p><p><strong>（4）<code>jobs.&lt;job_id.name</code></strong></p><p>workflow 文件的主体是<code>jobs</code>字段，表示要执行的一项或多项任务。</p><p><code>jobs</code>字段里面，需要写出每一项任务的<code>job_id</code>，具体名称自定义。<code>job_id</code>里面的<code>name</code>字段是任务的说明。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  my_first_job</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">My first job</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  my_second_job</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">My second job</span></span></code></pre></div><p>上面代码的<code>jobs</code>字段包含两项任务，<code>job_id</code>分别是<code>my_first_job</code>和<code>my_second_job</code>。</p><p><strong>（5）<code>jobs.&lt;job_id.needs</code></strong></p><p><code>needs</code>字段指定当前任务的依赖关系，即运行顺序。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  job1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  job2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    needs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">job1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  job3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    needs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">job1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">job2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre></div><p>上面代码中，<code>job1</code>必须先于<code>job2</code>完成，而<code>job3</code>等待<code>job1</code>和<code>job2</code>的完成才能运行。因此，这个 workflow 的运行顺序依次为：<code>job1</code>、<code>job2</code>、<code>job3</code>。</p><p><strong>（6）<code>jobs.&lt;job_id.runs-on</code></strong></p><p><code>runs-on</code>字段指定运行所需要的虚拟机环境。它是必填字段。目前可用的虚拟机如下。</p><ul><li><code>ubuntu-latest</code>，<code>ubuntu-18.04</code>或<code>ubuntu-16.04</code></li><li><code>windows-latest</code>，<code>windows-2019</code>或<code>windows-2016</code></li><li><code>macOS-latest</code>或<code>macOS-10.14</code></li></ul><p>下面代码指定虚拟机环境为<code>ubuntu-18.04</code>。</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">ubuntu-18.04</span></span></code></pre></div><p><strong>（7）<code>jobs.&lt;job_id.steps</code></strong></p><p><code>steps</code>字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。</p><ul><li><code>jobs.&lt;job_id.steps.name</code>：步骤名称。</li><li><code>jobs.&lt;job_id.steps.run</code>：该步骤运行的命令或者 action。</li><li><code>jobs.&lt;job_id.steps.env</code>：该步骤所需的环境变量。</li></ul><p>下面是一个完整的 workflow 文件的范例。</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Greeting from Mona</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">push</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  my-job</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">My Job</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">     - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Print a greeting</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">       env</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        MY_VAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Hi there! My name is</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        FIRST_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Mona</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        MIDDLE_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">The</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        LAST_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Octocat</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      run</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">        echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>steps</code>字段只包括一个步骤。该步骤先注入四个环境变量，然后执行一条 Bash 命令。</p><h3 id="工作流基础" tabindex="-1"><a class="header-anchor" href="#工作流基础"><span>工作流基础</span></a></h3><p>工作流必须包含以下基本组件：</p><ol><li>一个或多个将触发工作流的事件。</li><li>一个或多个作业，每个作业都将在运行机器上执行并运行一系列一个或多个步骤。</li><li>每个步骤都可以运行您定义的脚本或运行操作，这是一个可重用的扩展，可以简化您的工作流程。</li></ol><h3 id="工作流触发" tabindex="-1"><a class="header-anchor" href="#工作流触发"><span>工作流触发</span></a></h3><p>可以有多种触发方式，具体参见<a href="https://docs.github.com/zh/actions/using-workflows/triggering-a-workflow" target="_blank" rel="noopener noreferrer">官方文档</a>,下面以我的一个工作流举例讲解触发事件</p><div class="language-yaml" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">gh-pages</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    paths</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;sitemap.xml&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">cron</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;0 23 * * *&quot;</span></span></code></pre></div><p>这个例子的触发机制如下：</p><ol><li>当有推送行为发生</li><li>推送分支为<code>gh-pages</code></li><li><code>sitemap.xml</code>文件被修改</li><li>每天 UTC 23:00触发[^first]</li><li>push下的分支和文件要同时触发才会使工作流运行</li></ol><div class="hint-container caution"><p class="hint-container-title">注意!!!</p><p>虽然官方文档未提及需要把<code>.github/workflows</code>目录下的工作流文件存储于指定触发分支下，但我实际操作中发现，如我设置的触发分支为<code>gh-pages</code>但假如我的.yaml文件在<code>main</code>分支下不在<code>gh-pages</code>根目录的<code>.github/workflows</code>文件夹下，实际并不会触发。</p></div><p>[^first]: 可以使用 <a href="https://crontab.guru/" target="_blank" rel="noopener noreferrer">crontab guru</a> 帮助生成 cron 语法并确认其运行时间。 为了帮助入门，还提供了 <a href="https://crontab.guru/examples.html" target="_blank" rel="noopener noreferrer">crontab guru 示例</a>列表。计划工作流程的通知将发送给最后修改工作流程文件中的 cron 语法的用户。 有关详细信息，请参阅“<a href="https://docs.github.com/zh/actions/monitoring-and-troubleshooting-workflows/notifications-for-workflow-runs" target="_blank" rel="noopener noreferrer">工作流程运行通知</a>”。</p><h2 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h2><ul><li><strong>theme:</strong> adjust feature panel style</li><li><strong>theme:</strong> improve homepage (<a href="https://github.com/vuepress-theme-hope/vuepress-theme-hope/commit/f1b57dd679577aabaccd58d65ee505a5ed545078" target="_blank" rel="noopener noreferrer">f1b57dd</a>)</li><li><strong>theme:</strong> remove plugin externalLinkIcon (<a href="https://github.com/vuepress-theme-hope/vuepress-theme-hope/commit/d18762d039fec265df4a78b93c4af1bd4011a665" target="_blank" rel="noopener noreferrer">d18762d</a>)</li><li><strong>theme:</strong> update portfolio content (<a href="https://github.com/vuepress-theme-hope/vuepress-theme-hope/commit/4814255fc68bec6740ce6f725090f01101b2dd91" target="_blank" rel="noopener noreferrer">4814255</a>)</li></ul><h3 id="🪲-bug-fixes" tabindex="-1"><a class="header-anchor" href="#🪲-bug-fixes"><span>🪲 Bug Fixes</span></a></h3><ul><li>revert ariaLabel (<a href="https://github.com/vuepress-theme-hope/vuepress-theme-hope/commit/22ed6e0f3420a2f88785e3484b0a42b9948a35f1" target="_blank" rel="noopener noreferrer">22ed6e0</a>)</li><li><strong>theme:</strong> fix bundle style (<a href="https://github.com/vuepress-theme-hope/vuepress-theme-hope/commit/bea5ca5b90bc97ac8d2c7871aa74a4a5ce5cddae" target="_blank" rel="noopener noreferrer">bea5ca5</a>)</li><li><strong>theme:</strong> fix footer (<a href="https://github.com/vuepress-theme-hope/vuepress-theme-hope/commit/ded972fce8098c379958e24755f241bcaecb4ed3" target="_blank" rel="noopener noreferrer">ded972f</a>)</li><li><strong>theme:</strong> fix portfolio layout (<a href="https://github.com/vuepress-theme-hope/vuepress-theme-hope/commit/d4da7363bb14b782182f4f5d9f1f0e876fea30a8" target="_blank" rel="noopener noreferrer">d4da736</a>)</li><li><strong>theme:</strong> fix portfolio style (<a href="https://github.com/vuepress-theme-hope/vuepress-theme-hope/commit/36c83ee0cfd675b94eba807aa751827828b4ef40" target="_blank" rel="noopener noreferrer">36c83ee</a>)</li><li><strong>theme:</strong> fix transparent navbar preset (<a href="https://github.com/vuepress-theme-hope/vuepress-theme-hope/commit/91a7fc13b5f51b65690db1a32be8c45c58b19362" target="_blank" rel="noopener noreferrer">91a7fc1</a>)</li><li><strong>theme:</strong> read root locale author (<a href="https://github.com/vuepress-theme-hope/vuepress-theme-hope/commit/c8200f8d02a56d4d967bbe8b5ee760bed80e3b26" target="_blank" rel="noopener noreferrer">c8200f8</a>)</li></ul>`,72);function g(b,u){const i=l("router-link");return o(),h("div",null,[p(" more "),s("nav",k,[s("ul",null,[s("li",null,[e(i,{to:"#github-actions-是什么"},{default:a(()=>[t("GitHub Actions 是什么？")]),_:1})]),s("li",null,[e(i,{to:"#什么是ci-cd"},{default:a(()=>[t("什么是CI/CD？")]),_:1})]),s("li",null,[e(i,{to:"#基本概念"},{default:a(()=>[t("基本概念")]),_:1})]),s("li",null,[e(i,{to:"#关于工作流程"},{default:a(()=>[t("关于工作流程")]),_:1}),s("ul",null,[s("li",null,[e(i,{to:"#工作流基础"},{default:a(()=>[t("工作流基础")]),_:1})]),s("li",null,[e(i,{to:"#工作流触发"},{default:a(()=>[t("工作流触发")]),_:1})])])]),s("li",null,[e(i,{to:"#实例"},{default:a(()=>[t("实例")]),_:1}),s("ul",null,[s("li",null,[e(i,{to:"#🪲-bug-fixes"},{default:a(()=>[t("🪲 Bug Fixes")]),_:1})])])])])]),c])}const f=n(d,[["render",g],["__file","github-action.html.vue"]]),y=JSON.parse('{"path":"/tutorial/github/github-action.html","title":"GitHub Actions 使用介绍","lang":"zh-CN","frontmatter":{"title":"GitHub Actions 使用介绍","icon":"fa-brands fa-github","date":"2023-04-14T00:00:00.000Z","star":true,"cover":"https://files.codelife.cc/wallhaven/full/j3/wallhaven-j3zvvp.jpg?x-oss-process=image/resize,limit_0,m_fill,w_1366,h_768/quality,Q_92/format,webp","category":["GitHub"],"tag":["GitHub Actions"],"description":"GitHub Actions 是什么？ Github Actions 是 Github 官方出的持续集成服务, 挺早之前就推出了。类似的还有如微软的DevOps、GitLab CI、Circle CI、Travis CI等等。大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 ...","head":[["meta",{"property":"og:url","content":"https://viptv.work/tutorial/github/github-action.html"}],["meta",{"property":"og:site_name","content":"VIPTV 云视听"}],["meta",{"property":"og:title","content":"GitHub Actions 使用介绍"}],["meta",{"property":"og:description","content":"GitHub Actions 是什么？ Github Actions 是 Github 官方出的持续集成服务, 挺早之前就推出了。类似的还有如微软的DevOps、GitLab CI、Circle CI、Travis CI等等。大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://files.codelife.cc/wallhaven/full/j3/wallhaven-j3zvvp.jpg?x-oss-process=image/resize,limit_0,m_fill,w_1366,h_768/quality,Q_92/format,webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-26T13:19:32.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://files.codelife.cc/wallhaven/full/j3/wallhaven-j3zvvp.jpg?x-oss-process=image/resize,limit_0,m_fill,w_1366,h_768/quality,Q_92/format,webp"}],["meta",{"name":"twitter:image:alt","content":"GitHub Actions 使用介绍"}],["meta",{"property":"article:author","content":"Mr.Hefung"}],["meta",{"property":"article:tag","content":"GitHub Actions"}],["meta",{"property":"article:published_time","content":"2023-04-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-26T13:19:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GitHub Actions 使用介绍\\",\\"image\\":[\\"https://files.codelife.cc/wallhaven/full/j3/wallhaven-j3zvvp.jpg?x-oss-process=image/resize,limit_0,m_fill,w_1366,h_768/quality,Q_92/format,webp\\"],\\"datePublished\\":\\"2023-04-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-26T13:19:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hefung\\",\\"url\\":\\"/\\"}]}"]]},"headers":[{"level":2,"title":"GitHub Actions 是什么？","slug":"github-actions-是什么","link":"#github-actions-是什么","children":[]},{"level":2,"title":"什么是CI/CD？","slug":"什么是ci-cd","link":"#什么是ci-cd","children":[]},{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"关于工作流程","slug":"关于工作流程","link":"#关于工作流程","children":[{"level":3,"title":"工作流基础","slug":"工作流基础","link":"#工作流基础","children":[]},{"level":3,"title":"工作流触发","slug":"工作流触发","link":"#工作流触发","children":[]}]},{"level":2,"title":"实例","slug":"实例","link":"#实例","children":[{"level":3,"title":"🪲 Bug Fixes","slug":"🪲-bug-fixes","link":"#🪲-bug-fixes","children":[]}]}],"git":{"createdTime":1716109814000,"updatedTime":1716729572000,"contributors":[{"name":"viptv","email":"mail@viptv.work","commits":1}]},"readingTime":{"minutes":7.6,"words":2280},"filePathRelative":"tutorial/github/github-action.md","localizedDate":"2023年4月14日","excerpt":"","autoDesc":true}');export{f as comp,y as data};
